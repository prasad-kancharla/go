package main

import "fmt"

// closures are used for create functions that maintain state (by not directly exposing it)
// encapsulation
func main() {
	sequence := adder()
	fmt.Println(sequence())
	fmt.Println(sequence())
	fmt.Println(sequence())
	fmt.Println(sequence())

	subtractor := func() func(int) int {
		i := 100
		return func(value int) int {
			i -= value
			return i
		}
	}()

	fmt.Println(subtractor(10))
	fmt.Println(subtractor(20))
	fmt.Println(subtractor(5))
}

func adder() func() int {
	i := 0
	fmt.Println("The value of i:", i)
	return func() int {
		i++
		fmt.Println("added 1 to i")
		return i
	}
}
