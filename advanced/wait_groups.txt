package main

import (
	"fmt"
	"sync"
	"time"
)

func worker(id int, wg *sync.WaitGroup, secs int) {
	// the done method reduces the count in wg when the goroutine is complete
	defer wg.Done()
	fmt.Printf("Worker %d started...\n", id)
	time.Sleep(time.Duration(secs) * time.Second)
	fmt.Printf("Worker %d finished\n", id)
}
func main() {
	var wg sync.WaitGroup

	numWorkers := 3
	// set the count of goroutines to 3
	wg.Add(numWorkers)

	for i := range numWorkers {
		// go worker(i, &wg, numWorkers-i)
		go worker(i, &wg, 1)
	}

	// waits for all the 3 goroutines to complete
	// means, it waits till the counter becomes 0
	wg.Wait()
	fmt.Println("All workers are completed")
}
