package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

func main() {
	var num int64

	var wg sync.WaitGroup
	numGoroutines := 12

	for range numGoroutines {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for range 1000 {
				// without atomic counters/mutexes
				// multiple goroutines try to update same counter
				// it is called data race
				// and leads to unexpected behavior with incorrect results
				increment(&num)
				// num++
			}
		}()
	}

	wg.Wait()
	fmt.Println("Final value:", getValue(&num))

}

func increment(numPointer *int64) {
	atomic.AddInt64(numPointer, 1)
}

func getValue(numPointer *int64) int64 {
	return atomic.LoadInt64(numPointer)
}
