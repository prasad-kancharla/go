package main

import (
	"fmt"
	"math/rand"
)

// simple closing channel
// func main() {
// 	ch := make(chan int)

// 	go func() {
// 		for i := range 5 {
// 			ch <- i
// 		}

// 		close(ch)
// 	}()

// 	for val := range ch {
// 		fmt.Println(val)
// 	}

// }

// Receiving a closed channel
// func main() {
// ch := make(chan int)

// go func() {
// 	close(ch)
// 	// if you close the channle twice, it will result in a panic
// 	// close(ch)
// }()

// val, ok := <-ch
// if !ok {
// 	fmt.Println("Channel closed")
// } else {
// 	fmt.Println("Got value:", val)
// }
// }

func main() {
	ch1 := make(chan int)
	ch2 := make(chan int)

	go sendRandomNumbers(10, ch1)
	go filterEvenNumbers(ch1, ch2)

	for num := range ch2 {
		fmt.Println(num)
	}
}

func sendRandomNumbers(n int, ch chan<- int) {
	for range n {
		ch <- rand.Intn(1000)
	}
	close(ch)
}

func filterEvenNumbers(ch1 <-chan int, ch2 chan<- int) {
	for val := range ch1 {
		if val%2 == 0 {
			ch2 <- val
		}
	}
	// this function shouldn't close ch1
	// only the goroutine that sends data to ch1 should close it
	// in this case sendRandomNumbers should close it
	// we can close ch2 as we are sending data to it in this method
	close(ch2)
}
