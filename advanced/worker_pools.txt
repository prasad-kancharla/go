package main

import (
	"fmt"
	"time"
)

// design pattern to manage concurrent goroutines
// irrespective of the no of cores/threads
func main() {
	numWorkers := 3
	numJobs := 10

	tasks := make(chan int, numJobs)
	results := make(chan int, numJobs)

	// create workers
	for i := range numWorkers {
		go worker(i, tasks, results)
	}

	// send data to tasks channel
	for i := range numJobs {
		tasks <- i
	}

	close(tasks)

	for range numJobs {
		fmt.Println("Result is", <-results)
	}
}

func worker(id int, tasks <-chan int, results chan<- int) {
	for task := range tasks {
		fmt.Printf("Worker %d is processing %d\n", id, task)
		time.Sleep(time.Second)
		results <- task * 2
	}
}
